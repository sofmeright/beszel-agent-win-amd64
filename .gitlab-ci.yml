stages:
  - build
  - release

variables:
  BINARY_NAME: "beszel-agent_windows_amd64.exe"
  UPSTREAM_REPO_URL: "https://github.com/henrygd/beszel.git"
  LHM_REPO_URL: "https://github.com/LibreHardwareMonitor/LibreHardwareMonitor.git"
  GITLAB_DOMAIN: "https://gitlab.prplanit.com"
  OUTPUT_DIR: "beszel-agent_windows_amd64-$CI_COMMIT_TAG"
  ZIP_NAME: "$OUTPUT_DIR.zip"

build-release:
  before_script: |
    echo "---------------------------------------------------------------------------"
    echo "AntParade GitOps üêú - Preparing $CI_JOB_IMAGE image for build..."
    echo "---------------------------------------------------------------------------"
    echo "Installing dependencies... (git, zip, wget, curl, libicu)"
    apt-get update && apt-get install -y git zip wget curl libicu67
    
    # Install .NET 8 SDK (which can build .NET Framework 4.8)
    wget https://dot.net/v1/dotnet-install.sh -O dotnet-install.sh
    chmod +x dotnet-install.sh
    bash ./dotnet-install.sh --channel 8.0 --install-dir /usr/share/dotnet
    ln -s /usr/share/dotnet/dotnet /usr/local/bin/dotnet
    export PATH="/usr/share/dotnet:$PATH"
    
    # Verify installations
    dotnet --version
    go version
  environment: production
  image: golang:1.24.5-bullseye
  rules:
    - if: $CI_COMMIT_TAG
  stage: build
  script: |
    echo "---------------------------------------------------------------------------"
    echo "AntParade GitOps üêú - Building $OUTPUT_DIR with LibreHardwareMonitor..."
    echo "---------------------------------------------------------------------------"
    
    # Clone LibreHardwareMonitor first
    echo "Cloning LibreHardwareMonitor..."
    git clone --depth 1 $LHM_REPO_URL lhm-source
    
    # Build LibreHardwareMonitor for .NET Framework 4.8
    cd lhm-source
    echo "Building LibreHardwareMonitor for .NET Framework 4.8..."
    
    # First, let's see what's in the repository
    echo "=== LibreHardwareMonitor repository structure ==="
    find . -name "*.csproj" | head -10
    find . -name "*.sln" | head -5
    ls -la
    
    # Try to build - LibreHardwareMonitor might use different target frameworks
    # We'll try multiple approaches to get .NET 4.8 compatible binaries
    BUILD_SUCCESS=false
    
    if [ -f "LibreHardwareMonitorLib/LibreHardwareMonitorLib.csproj" ]; then
        echo "Found LibreHardwareMonitorLib project, building..."
        echo "=== Project file content ==="
        head -20 LibreHardwareMonitorLib/LibreHardwareMonitorLib.csproj
        
        # Try to build specifically for net48 first
        echo "Attempting to build for .NET Framework 4.8 (net48)..."
        dotnet build LibreHardwareMonitorLib/LibreHardwareMonitorLib.csproj -c Release -f net48 -v normal && BUILD_SUCCESS=true
        
        if [ "$BUILD_SUCCESS" = false ]; then
            echo "net48 build failed, trying to modify project to support net48..."
            
            # Check if net48 is already supported
            if grep -q "net48" LibreHardwareMonitorLib/LibreHardwareMonitorLib.csproj; then
                echo "net48 is already in project file but build failed"
            else
                echo "Adding net48 to target frameworks..."
                # Create a backup and modify the project file
                cp LibreHardwareMonitorLib/LibreHardwareMonitorLib.csproj LibreHardwareMonitorLib/LibreHardwareMonitorLib.csproj.backup
                
                # Add net48 to TargetFrameworks if it exists, or create TargetFramework with net48
                if grep -q "TargetFrameworks" LibreHardwareMonitorLib/LibreHardwareMonitorLib.csproj; then
                    sed -i 's/<TargetFrameworks>\([^<]*\)<\/TargetFrameworks>/<TargetFrameworks>\1;net48<\/TargetFrameworks>/' LibreHardwareMonitorLib/LibreHardwareMonitorLib.csproj
                elif grep -q "TargetFramework" LibreHardwareMonitorLib/LibreHardwareMonitorLib.csproj; then
                    sed -i 's/<TargetFramework>\([^<]*\)<\/TargetFramework>/<TargetFrameworks>\1;net48<\/TargetFrameworks>/' LibreHardwareMonitorLib/LibreHardwareMonitorLib.csproj
                else
                    # Add TargetFramework after PropertyGroup
                    sed -i '/<PropertyGroup>/a\    <TargetFramework>net48</TargetFramework>' LibreHardwareMonitorLib/LibreHardwareMonitorLib.csproj
                fi
                
                echo "Modified project file:"
                head -20 LibreHardwareMonitorLib/LibreHardwareMonitorLib.csproj
                
                # Try building again
                dotnet build LibreHardwareMonitorLib/LibreHardwareMonitorLib.csproj -c Release -f net48 -v normal && BUILD_SUCCESS=true
            fi
        fi
        
        if [ "$BUILD_SUCCESS" = false ]; then
            echo "net48 build still failed, trying standard build..."
            dotnet build LibreHardwareMonitorLib/LibreHardwareMonitorLib.csproj -c Release -v normal && BUILD_SUCCESS=true
        fi
        
    elif [ -f "LibreHardwareMonitor.sln" ]; then
        echo "Found solution file, building entire solution..."
        dotnet build LibreHardwareMonitor.sln -c Release -v normal && BUILD_SUCCESS=true
    else
        echo "No standard project files found, looking for alternatives..."
        find . -name "*.csproj" -exec echo "Found: {}" \;
        # Try building the first .csproj we find
        FIRST_PROJ=$(find . -name "*.csproj" | head -1)
        if [ -n "$FIRST_PROJ" ]; then
            echo "Trying to build: $FIRST_PROJ"
            dotnet build "$FIRST_PROJ" -c Release -v normal && BUILD_SUCCESS=true
        fi
    fi
    
    echo "=== Build completed. Success: $BUILD_SUCCESS ==="
    echo "=== Looking for all DLL files in bin directories ==="
    find . -name "*.dll" -path "*/bin/*" | head -20
    echo "=== Looking for any Release directories ==="
    find . -type d -name "Release" | head -10
    echo "=== Contents of any Release directories ==="
    find . -type d -name "Release" -exec ls -la {} \; | head -50
    
    cd ..
    
    # Clone Beszel
    echo "Cloning the $CI_COMMIT_TAG branch of $UPSTREAM_REPO_URL..."
    git clone --depth 1 --branch $CI_COMMIT_TAG $UPSTREAM_REPO_URL
    
    # Create the LHM directory structure that Beszel expects
    echo "Setting up LibreHardwareMonitor binaries for Beszel embed..."
    mkdir -p beszel/beszel/cmd/agent/lhm/bin/Release
    
    # Copy LHM binaries to the expected location
    # Since LibreHardwareMonitor builds for net472, but Beszel expects net48,
    # we'll copy the net472 binaries to the net48 directory
    LHM_FOUND=false
    
    # First, try to find and copy the net472 binaries directly to net48
    if [ -d "lhm-source/bin/Release/net472" ]; then
        echo "Found LHM net472 binaries, copying to net48 directory..."
        cp -r "lhm-source/bin/Release/net472" "beszel/beszel/cmd/agent/lhm/bin/Release/net48"
        LHM_FOUND=true
        echo "‚úÖ Successfully copied net472 binaries to net48 directory"
    elif [ -d "lhm-source/LibreHardwareMonitorLib/bin/Release/net472" ]; then
        echo "Found LHM net472 binaries in LibreHardwareMonitorLib, copying to net48 directory..."
        cp -r "lhm-source/LibreHardwareMonitorLib/bin/Release/net472" "beszel/beszel/cmd/agent/lhm/bin/Release/net48"
        LHM_FOUND=true
        echo "‚úÖ Successfully copied net472 binaries to net48 directory"
    else
        # Fallback: look for any net472 directory and copy it
        NET472_DIR=$(find lhm-source -type d -name "net472" -path "*/bin/Release/*" | head -1)
        if [ -n "$NET472_DIR" ] && [ -d "$NET472_DIR" ]; then
            echo "Found net472 directory at: $NET472_DIR"
            cp -r "$NET472_DIR" "beszel/beszel/cmd/agent/lhm/bin/Release/net48"
            LHM_FOUND=true
            echo "‚úÖ Successfully copied net472 binaries to net48 directory"
        fi
    fi
    
    if [ "$LHM_FOUND" = true ]; then
        echo "‚úÖ LibreHardwareMonitor binaries prepared for net48:"
        ls -la beszel/beszel/cmd/agent/lhm/bin/Release/net48/
        
        # Verify the embed pattern will work
        echo "Verifying embed pattern..."
        if [ -d "beszel/beszel/cmd/agent/lhm/bin/Release/net48" ] && [ "$(ls -A beszel/beszel/cmd/agent/lhm/bin/Release/net48/)" ]; then
            echo "‚úÖ net48 directory exists and contains files - embed should work!"
        else
            echo "‚ùå net48 directory is empty or missing"
            LHM_FOUND=false
        fi
    fi
    
    if [ "$LHM_FOUND" = false ]; then
        echo "‚ö†Ô∏è  Warning: Could not find LibreHardwareMonitor net472 binaries. Building without LHM support."
        # Clean up empty directory to avoid embed errors
        rm -rf beszel/beszel/cmd/agent/lhm
    fi
    
    # Build Beszel agent
    cd beszel/beszel/cmd/agent
    echo "Building $BINARY_NAME from the source for $OUTPUT_DIR..."
    
    # Try building with LHM support first, fall back without it
    if [ "$LHM_FOUND" = true ]; then
        echo "Building with LibreHardwareMonitor support..."
        GOOS=windows GOARCH=amd64 CGO_ENABLED=0 go build -ldflags "-w -s" -o $BINARY_NAME
        BUILD_STATUS=$?
    else
        BUILD_STATUS=1  # Force fallback
    fi
    
    # If LHM build failed, try without LHM
    if [ $BUILD_STATUS -ne 0 ]; then
        echo "Falling back to build without LibreHardwareMonitor..."
        rm -rf lhm  # Remove LHM directory to avoid embed issues
        GOOS=windows GOARCH=amd64 CGO_ENABLED=0 go build -ldflags "-w -s" -o $BINARY_NAME
    fi

    echo "Packaging release into $ZIP_NAME..."
    mkdir -p "$CI_PROJECT_DIR/$OUTPUT_DIR"
    mv $BINARY_NAME "$CI_PROJECT_DIR/$OUTPUT_DIR/"
    cd "$CI_PROJECT_DIR"
    zip -r "$ZIP_NAME" "$OUTPUT_DIR"

    echo "$ZIP_NAME has been packaged, here are its details:"
    ls -lh "$ZIP_NAME"
    
    echo "AntParade GitOps üêú - build-release job complete."

  artifacts:
    paths:
      - "$ZIP_NAME"
    expire_in: 1 week

create-release:
  before_script: |
    echo "---------------------------------------------------------------------------"
    echo "AntParade GitOps üêú - Preparing $CI_JOB_IMAGE image for release upload tasks"
    echo "---------------------------------------------------------------------------"
    echo "Installing dependencies... (bash curl jq)"
    apk add --no-cache bash curl jq
  dependencies:
    - build-release
  stage: release
  image: alpine:latest
  rules:
    - if: $CI_COMMIT_TAG
  script: |
    echo "---------------------------------------------------------------------------"
    echo "AntParade GitOps üêú - Begin tasks for upload of $BINARY_NAME $CI_COMMIT_TAG"
    echo "---------------------------------------------------------------------------"
    echo "Creating release $CI_COMMIT_TAG..."
    curl --header "PRIVATE-TOKEN: $GITLAB_TOKEN" --request POST \
      --form "name=Release $CI_COMMIT_TAG" \
      --form "tag_name=$CI_COMMIT_TAG" \
      --form "description=AntParade GitOps üêú packaged $CI_COMMIT_TAG release of $CI_PROJECT_NAME with LibreHardwareMonitor support." \
      "$CI_API_V4_URL/projects/$CI_PROJECT_ID/releases" || echo "Release might already exist"

    echo "Uploading $ZIP_NAME to the $CI_PROJECT_NAME gitlab package registry..."
    curl --header "PRIVATE-TOKEN: $GITLAB_TOKEN" \
        --upload-file "$ZIP_NAME" \
        "$GITLAB_DOMAIN/api/v4/projects/$CI_PROJECT_ID/packages/generic/beszel-agent/$CI_COMMIT_TAG/$ZIP_NAME"

    echo "Need to determine the uploaded package's URL..."
    echo "Getting packages for project..."
    PACKAGE_JSON=$(curl --silent --header "PRIVATE-TOKEN: $GITLAB_TOKEN" \
      "$CI_API_V4_URL/projects/$CI_PROJECT_ID/packages")

    PACKAGE_ID=$(echo "$PACKAGE_JSON" | jq -r '.[] | select(.name=="beszel-agent" and .version=="'"$CI_COMMIT_TAG"'") | .id')

    if [ -z "$PACKAGE_ID" ]; then
      echo "‚ùå No matching package found for version $CI_COMMIT_TAG"
      exit 1
    fi

    echo "Found Package ID: $PACKAGE_ID"

    echo "Fetching package files..."
    PACKAGE_FILE_JSON=$(curl --silent --header "PRIVATE-TOKEN: $GITLAB_TOKEN" \
      "$CI_API_V4_URL/projects/$CI_PROJECT_ID/packages/$PACKAGE_ID/package_files")

    PACKAGE_FILE_ID=$(echo "$PACKAGE_FILE_JSON" | jq '.[0].id')

    if [ -z "$PACKAGE_FILE_ID" ] || [ "$PACKAGE_FILE_ID" = "null" ]; then
      echo "‚ùå No package files found"
      exit 1
    fi

    PACKAGE_LINK="${GITLAB_DOMAIN}/${CI_PROJECT_PATH}/-/package_files/${PACKAGE_FILE_ID}/download"
    echo "‚úÖ The uploaded package's URL is $PACKAGE_LINK."

    curl --header "PRIVATE-TOKEN: $GITLAB_TOKEN" \
      --request POST \
      --header "Content-Type: application/json" \
      --data "{\"name\":\"$ZIP_NAME\",\"url\":\"$PACKAGE_LINK\",\"link_type\":\"package\"}" \
      "$CI_API_V4_URL/projects/$CI_PROJECT_ID/releases/$CI_COMMIT_TAG/assets/links"
    
    echo "AntParade GitOps üêú - create-release job complete."